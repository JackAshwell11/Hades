# Builtin
from collections.abc import Callable

# Custom
from hades.sprite import HadesSprite
from hades_extensions.ecs import ComponentBase

# Define the action function for callables
type ActionFunction = Callable[[int], float]

class Stat(ComponentBase):
    def get_value(self: Stat) -> float: ...
    def set_value(self: Stat, new_value: float) -> None: ...
    def get_max_value(self: Stat) -> float: ...
    def add_to_max_value(self: Stat, value: float) -> None: ...
    def get_current_level(self: Stat) -> int: ...
    def increment_current_level(self: Stat) -> None: ...
    def get_max_level(self: Stat) -> int: ...

class Armour(Stat): ...
class ArmourRegen(Stat): ...

class Attack(ComponentBase):
    @property
    def time_until_ranged_attack(self: Attack) -> float: ...
    def previous_ranged_attack(self: Attack) -> None: ...
    def next_ranged_attack(self: Attack) -> None: ...

class Health(Stat): ...

class Inventory(ComponentBase):
    @property
    def items(self: Inventory) -> list[int]: ...

class InventorySize(Stat): ...

class KinematicComponent(ComponentBase):
    def get_position(self: KinematicComponent) -> tuple[float, float]: ...
    def get_velocity(self: KinematicComponent) -> tuple[float, float]: ...
    def set_rotation(self: KinematicComponent, angle: float) -> None: ...

class Money(ComponentBase):
    money: int

class PythonSprite(ComponentBase):
    sprite: HadesSprite

class Upgrades(ComponentBase):
    @property
    def upgrades(
        self: Upgrades,
    ) -> dict[type[Stat], tuple[ActionFunction, ActionFunction]]: ...
