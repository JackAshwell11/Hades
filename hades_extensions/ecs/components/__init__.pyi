# Custom
from hades.sprite import HadesSprite
from hades_extensions.ecs import (
    ActionFunction,
    AttackAlgorithm,
    ComponentBase,
    StatusEffectType,
)

class Stat(ComponentBase):
    def get_value(self: Stat) -> float: ...
    def set_value(self: Stat, new_value: float) -> None: ...
    def get_max_value(self: Stat) -> float: ...
    def add_to_max_value(self: Stat, value: float) -> None: ...
    def get_current_level(self: Stat) -> int: ...
    def increment_current_level(self: Stat) -> None: ...
    def get_max_level(self: Stat) -> int: ...

class Armour(Stat): ...
class ArmourRegen(Stat): ...

class Attack(ComponentBase):
    @property
    def current_attack(self: Attack) -> AttackAlgorithm: ...
    @property
    def time_since_last_attack(self: Attack) -> float: ...

class AttackCooldown(Stat): ...
class AttackRange(Stat): ...
class Damage(Stat): ...
class EffectApplier(ComponentBase): ...
class FootprintInterval(Stat): ...
class FootprintLimit(Stat): ...
class Footprints(ComponentBase): ...
class Health(Stat): ...

class Inventory(ComponentBase):
    @property
    def items(self: Inventory) -> list[int]: ...

class InventorySize(Stat): ...

class KeyboardMovement(ComponentBase):
    moving_north: bool
    moving_east: bool
    moving_south: bool
    moving_west: bool

class KinematicComponent(ComponentBase):
    def get_position(self: KinematicComponent) -> tuple[float, float]: ...
    def get_velocity(self: KinematicComponent) -> tuple[float, float]: ...
    def set_rotation(self: KinematicComponent, angle: float) -> None: ...

class MeleeAttackSize(Stat): ...

class Money(ComponentBase):
    money: int

class MovementForce(Stat): ...

class PythonSprite(ComponentBase):
    sprite: HadesSprite

class StatusEffect:
    @property
    def effect_type(self: StatusEffect) -> StatusEffectType: ...
    @property
    def duration(self: StatusEffect) -> float: ...
    @property
    def target_component(self: StatusEffect) -> type[ComponentBase]: ...

class StatusEffects(ComponentBase):
    @property
    def active_effects(self: StatusEffects) -> list[StatusEffect]: ...

class SteeringMovement(ComponentBase):
    target_id: int

class Upgrades(ComponentBase):
    @property
    def upgrades(
        self: Upgrades,
    ) -> dict[type[Stat], tuple[ActionFunction, ActionFunction]]: ...

class ViewDistance(Stat): ...
