# Builtin
from collections.abc import Callable, Sequence
from enum import Enum
from typing import Literal, overload

# Custom
from hades_extensions.ecs import EffectType, GameObjectType, Registry

class EventType(Enum):
    GameObjectCreation = ...
    GameObjectDeath = ...
    PositionChanged = ...
    InventoryUpdate = ...
    SpriteRemoval = ...
    StatusEffectUpdate = ...
    MoneyUpdate = ...
    AttackCooldownUpdate = ...
    RangedAttackSwitch = ...
    ShopItemLoaded = ...
    ShopItemPurchased = ...
    ShopOpen = ...
    InventoryOpen = ...
    GameOptionsOpen = ...
    SaveFilesUpdated = ...
    GameOpen = ...
    HealthChanged = ...
    ArmourChanged = ...

class SaveFileInfo:
    name: str
    last_modified: str
    player_level: int

class GameState:
    @property
    def player_id(self: GameState) -> int: ...
    def set_seed(self: GameState, seed: str) -> None: ...

class InputHandler:
    def on_key_press(self: InputHandler, symbol: int, modifiers: int) -> None: ...
    def on_key_release(self: InputHandler, symbol: int, modifiers: int) -> None: ...
    def on_mouse_press(
        self: InputHandler,
        x: float,
        y: float,
        button: int,
        modifiers: int,
    ) -> bool: ...

class SaveManager:
    def new_game(self: SaveManager) -> None: ...
    def load_save(self: SaveManager, save_index: int) -> None: ...
    def save_game(self: SaveManager) -> None: ...
    def delete_save(self: SaveManager, save_index: int) -> None: ...

class GameEngine:
    def __init__(self: GameEngine) -> None: ...
    @property
    def registry(self: GameEngine) -> Registry: ...
    @property
    def game_state(self: GameEngine) -> GameState: ...
    @property
    def input_handler(self: GameEngine) -> InputHandler: ...
    @property
    def save_manager(self: GameEngine) -> SaveManager: ...
    def setup(
        self: GameEngine,
        shop_file_path: str,
        save_directory_path: str,
    ) -> None: ...
    def on_update(self: GameEngine, delta_time: float) -> None: ...
    def on_fixed_update(self: GameEngine, delta_time: float) -> None: ...

def load_hitbox(
    game_object_type: GameObjectType,
    hitbox: Sequence[tuple[float, float]],
) -> bool: ...
@overload
def add_callback(
    event_type: Literal[EventType.GameObjectCreation],
    callback: Callable[[int, GameObjectType], None],
) -> None: ...
@overload
def add_callback(
    event_type: Literal[EventType.GameObjectDeath],
    callback: Callable[[int], None],
) -> None: ...
@overload
def add_callback(
    event_type: Literal[EventType.PositionChanged],
    callback: Callable[[int, tuple[float, float]], None],
) -> None: ...
@overload
def add_callback(
    event_type: Literal[EventType.InventoryUpdate],
    callback: Callable[[list[int]], None],
) -> None: ...
@overload
def add_callback(
    event_type: Literal[EventType.SpriteRemoval],
    callback: Callable[[int], None],
) -> None: ...
@overload
def add_callback(
    event_type: Literal[EventType.StatusEffectUpdate],
    callback: Callable[[dict[EffectType, float]], None],
) -> None: ...
@overload
def add_callback(
    event_type: Literal[EventType.MoneyUpdate],
    callback: Callable[[int], None],
) -> None: ...
@overload
def add_callback(
    event_type: Literal[EventType.AttackCooldownUpdate],
    callback: Callable[[int, float, float, float], None],
) -> None: ...
@overload
def add_callback(
    event_type: Literal[EventType.RangedAttackSwitch],
    callback: Callable[[int], None],
) -> None: ...
@overload
def add_callback(
    event_type: Literal[EventType.ShopItemLoaded],
    callback: Callable[[int, tuple[str, str, str], int], None],
) -> None: ...
@overload
def add_callback(
    event_type: Literal[EventType.ShopItemPurchased],
    callback: Callable[[int, int], None],
) -> None: ...
@overload
def add_callback(
    event_type: Literal[EventType.ShopOpen],
    callback: Callable[[], None],
) -> None: ...
@overload
def add_callback(
    event_type: Literal[EventType.InventoryOpen],
    callback: Callable[[], None],
) -> None: ...
@overload
def add_callback(
    event_type: Literal[EventType.GameOptionsOpen],
    callback: Callable[[], None],
) -> None: ...
@overload
def add_callback(
    event_type: Literal[EventType.SaveFilesUpdated],
    callback: Callable[[list[SaveFileInfo]], None],
) -> None: ...
@overload
def add_callback(
    event_type: Literal[EventType.GameOpen],
    callback: Callable[[], None],
) -> None: ...
@overload
def add_callback(
    event_type: Literal[EventType.HealthChanged],
    callback: Callable[[int, float], None],
) -> None: ...
@overload
def add_callback(
    event_type: Literal[EventType.ArmourChanged],
    callback: Callable[[int, float], None],
) -> None: ...
