# Builtin
from collections.abc import Callable, Sequence
from enum import Enum
from typing import Literal, overload

# Custom
from hades_extensions.ecs import GameObjectType, Registry, StatusEffectType

class EventType(Enum):
    GameObjectCreation = ...
    GameObjectDeath = ...
    InventoryUpdate = ...
    SpriteRemoval = ...
    StatusEffectUpdate = ...
    MoneyUpdate = ...
    AttackCooldownUpdate = ...
    RangedAttackSwitch = ...
    ShopItemLoaded = ...
    ShopItemPurchased = ...
    ShopOpen = ...
    InventoryOpen = ...
    GameOptionsOpen = ...

class GameEngine:
    def __init__(self: GameEngine) -> None: ...
    @property
    def registry(self: GameEngine) -> Registry: ...
    @property
    def player_id(self: GameEngine) -> int: ...
    def set_seed(self: GameEngine, seed: str) -> None: ...
    def setup(self: GameEngine, file: str = "") -> None: ...
    def on_update(self: GameEngine, delta_time: float) -> None: ...
    def on_fixed_update(self: GameEngine, delta_time: float) -> None: ...
    def on_key_press(self: GameEngine, symbol: int, modifiers: int) -> None: ...
    def on_key_release(self: GameEngine, symbol: int, modifiers: int) -> None: ...
    def on_mouse_press(
        self: GameEngine,
        x: float,
        y: float,
        button: int,
        modifiers: int,
    ) -> bool: ...
    def use_item(self: GameEngine, target_id: int, item_id: int) -> None: ...

def load_hitbox(
    game_object_type: GameObjectType,
    hitbox: Sequence[tuple[float, float]],
) -> bool: ...
@overload
def add_callback(
    event_type: Literal[EventType.GameObjectCreation],
    callback: Callable[[int, GameObjectType, tuple[float, float]], None],
) -> None: ...
@overload
def add_callback(
    event_type: Literal[EventType.GameObjectDeath],
    callback: Callable[[int], None],
) -> None: ...
@overload
def add_callback(
    event_type: Literal[EventType.InventoryUpdate],
    callback: Callable[[list[int]], None],
) -> None: ...
@overload
def add_callback(
    event_type: Literal[EventType.SpriteRemoval],
    callback: Callable[[int], None],
) -> None: ...
@overload
def add_callback(
    event_type: Literal[EventType.StatusEffectUpdate],
    callback: Callable[[dict[StatusEffectType, float]], None],
) -> None: ...
@overload
def add_callback(
    event_type: Literal[EventType.MoneyUpdate],
    callback: Callable[[int], None],
) -> None: ...
@overload
def add_callback(
    event_type: Literal[EventType.AttackCooldownUpdate],
    callback: Callable[[int, float, float, float], None],
) -> None: ...
@overload
def add_callback(
    event_type: Literal[EventType.RangedAttackSwitch],
    callback: Callable[[int], None],
) -> None: ...
@overload
def add_callback(
    event_type: Literal[EventType.ShopItemLoaded],
    callback: Callable[[int, tuple[str, str, str], int], None],
) -> None: ...
@overload
def add_callback(
    event_type: Literal[EventType.ShopItemPurchased],
    callback: Callable[[int, int], None],
) -> None: ...
@overload
def add_callback(
    event_type: Literal[EventType.ShopOpen],
    callback: Callable[[], None],
) -> None: ...
@overload
def add_callback(
    event_type: Literal[EventType.InventoryOpen],
    callback: Callable[[], None],
) -> None: ...
@overload
def add_callback(
    event_type: Literal[EventType.GameOptionsOpen],
    callback: Callable[[], None],
) -> None: ...
